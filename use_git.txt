一：
git init   初始化git仓库

二：
添加文件到git仓库

	1.git add 文件名
	2.git commit -m '说明'
	
三：
git status	掌握工作区状态

git diff	查看修改内容


git log		查看从最近到最远的提交日志
加上参数  --pretty=oneline 参数，使内容简洁

四：
HEAD	当前版本
HEAD^	上一个版本
HEAD^^	上两个版本
HEAD~100	上一百个版本

git reset	使用该命令回退版本

git reset --hard HEAD^    返回上一个版本
git reset --hard commit_id

git reflog	查看命令日志


git checkout -- file_name	把file_name文件在工作区的修改全部撤销
1.文件还未放入暂存区，撤销修改就回到和版本库一模一样的状态
2.已添加到暂存区，又做了修改，现在，撤销修改就回到添加到暂存区后的状态
总之，就是让这个文件回到最后一次git commit或git add时的状态


场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- <file>
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD <file> , 就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset --hard HEAD^ , 不过前提是没有推送到远程库。

git reset HEAD <file>    把暂存区内容清除

git rm <file>	删除文件

git checkout -- <file>		版本库版本替换工作区版本




远程仓库
1.创建SSH Key
ssh-keygen -t rsa -C 'youremail@example.com'

2.创建远程仓库

3.连接远程仓库
git remote add origin git@github.com:zmg02/learngit.git


4.推送内容
git push -u origin master
由于远程库是空的，我们第一次推送master分支时，加上了 -u 参数，git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

git push origin master		把本地master分支的最新修改推送至GitHub

不用每次提交推送，当本地工作完成后再推送内容到远程



克隆远程仓库
git	clone <url>


分支管理

git checkout -b dev
-b 参数表示创建并切换，相当于以下两条命令：
git branch dev
git checkout dev


git checkout master 切换成master分支

git merge dev	把dev分支合并到当前分支上

git branch -d dev	删除dev分支

switch
git switch -c dev	替换 git checkout -b dev
git switch master   替换 git checkout master

git branch 查看分支
git branch <name> 创建分支
git checkout <name> 或者 git switch <name>	切换分支
git checkout -b <name> 或者 git switch -c <name> 创建+切换分支
git merge <name>	合并某分支到当前分支
git branch -d <name>	删除分支


解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
修改冲突文件
重新add commit


git branch -d <branch> 删除分支
git branch -D <branch> 强制删除分支





